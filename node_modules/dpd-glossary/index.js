var Resource = require('deployd/lib/resource')
  , Script = require('deployd/lib/script')
  , Glossary= require("glossary")
  , util = require('util');

function GlossaryResource(name,options) {
  Resource.apply(this, arguments);
  this.glossary = new Glossary({
        minFreq: this.config.minFreq || 1,                 
        blacklist: this.config.blacklist || [],
        collapse:  this.config.collapse || false,      
        verbose: this.config.verbose ||false
      });
}
util.inherits(GlossaryResource, Resource);

GlossaryResource.label = "Glossary";
GlossaryResource.events = ["get"];
GlossaryResource.basicDashboard = {
  settings: [{
      name: 'minFreq',
      type: 'number',
      description: "To limit the terms to only those that occur with a certain frequency"
  }, {
      name: 'blacklist',
      type: 'textarea',
      description: 'black list:["fuck", "bitch", "whore", "pussy"]'
  }, {
      name: 'collapse',
      type: 'checkbox',
      description: 'To remove terms that are sub-terms of other terms'
  }, {
      name: 'verbose',
      type: 'checkbox',
      description: 'verbose to also get the count of each term'
      
  }]
};
module.exports = GlossaryResource;

GlossaryResource.prototype.clientGeneration = true;

GlossaryResource.prototype.handle = function (ctx, next) {
  var parts = ctx.url.split('/').filter(function(p) { return p; });

  var result = {};

  var domain = {
      url: ctx.url
    , parts: parts
    , query: ctx.query
    , body: ctx.body
    , 'this': result
    , setResult: function(val) {
      result = val;
    }
    , glossary: function(val) {
       var keywords = new Glossary(ctx.query.options).extract(val);
      return keywords;
    }
  };
 if (ctx.method === "GET" && !this.events.get) {
    var keyword=this.glossary.extract(ctx.query.sourceText,ctx.query.options);
    result=keyword;
 	ctx.done(null,result);
 	
  }else if ( ctx.method === "GET" && this.events.get){
      this.events.get.run(ctx, domain, function(err) {
      ctx.done(err, result);
    });
  } 
  
  else {
    next();
  }

  
};